<?php

/****************************************************************************
 ********************** ANONYMOUS ORDER EXERCISE ****************************
 ***************************************************************************/

/**
 * Implements hook_init().
 */
function cg_training_init() {
  // Fetches the node that references the product id 2.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node', '=')
    ->entityCondition('bundle', 'product_display', '=')
    ->entityCondition('status', 1, '=')
    ->fieldCondition('field_product', 'product_id', 2, '=');
  $result = $query->execute();

  dsm($result, 'Result EFQ');
  dsm(node_load(key(reset($result))), 'Node');

  // Fetches products with extra field.
  $query = new EntityFieldQueryExtraFields();

  $query->entityCondition('entity_type', 'node', '=')
    ->entityCondition('bundle', 'product_display', '=')
    ->fieldCondition('field_product', 'product_id', 2, '=')
    ->addExtraField('field_product', 'product_id', 'id');
  $result = $query->execute();

  dsm($result, 'Result EFQ Extra fields');

  dsm(commerce_order_load(1), 'Commande');
  dsm(commerce_line_item_load(1), 'Line item 1');
  dsm(commerce_line_item_load(2), 'Line item 2');
  // Uncomment this line to access session's data and read the values related
  // to anonymous orders.
  dsm($_SESSION);
}


/****************************************************************************
 ************************* VIEW MODE EXERCISE *******************************
 ***************************************************************************/


/**
 * Implements hook_entity_info_alter().
 */
function cg_training_entity_info_alter(&$entity_types) {
  // Adds a new view mode than can be leveraged to custom the product displays
  // in the catalog.
  $entity_types['node']['view modes']['catalog'] = array(
    'label' => t('Catalog'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_view().
 */
function cg_training_entity_view($entity, $type, $view_mode, $langcode) {
  // Trigger the easter egg if we are displaying the product ID 2.
  if ($type == 'node' && $entity->type == 'product_display' && $view_mode != 'teaser') {
    // Extract the field data properly with two methods.
    // First one by accessing the data through the language array.
    // $products = $entity->field_product[LANGUAGE_NONE];
    // Second one with the field functions.
    $products = field_get_items($type, $entity, 'field_product');

    // Trigger the custom rules event, pass the entity as an argument.
    rules_invoke_event('node_easter_egg', $entity);

    // Trigger the other custom rules event checking if the product id 2 is
    // referenced.
    foreach ($products as $product) {
      if ($product['product_id'] == 2) {
        $product = entity_load_single('commerce_product', $product['product_id']);
        rules_invoke_event('product_easter_egg', $product);
      }
    }
  }
}

