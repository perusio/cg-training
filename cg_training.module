<?php
/****************************************************************************
 ********************** CUSTOM RULES EVENT EXERCISE *************************
 ***************************************************************************/

/**
 * Implements hook_rules_event_info().
 */
function cg_training_rules_event_info() {
  // Example of two similar events, one based on the node entity type as
  // parameter and the other one with the product entity type as parameter.
  $events['product_easter_egg'] = array(
    'label' => t('User found an easter egg (product)'),
    'group' => t('Commerce Product'),
    'variables' => array(
      'commerce_product' => array(
        'type' => 'commerce_product',
        'label' => t('Product triggering the event')
      )
    ),
  );
  $events['node_easter_egg'] = array(
    'label' => t('User found an easter egg (node)'),
    'group' => t('Node'),
    'variables' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node triggering the event.')
      )
    ),
  );
  return $events;
}

/**
 * Implements hook_entity_view().
 */
function cg_training_entity_view($entity, $type, $view_mode, $langcode) {
  // Trigger the easter egg if we are displaying the product ID 2.
  if ($type == 'node' && $entity->type == 'product_display' && $view_mode != 'teaser') {
    // Extract the field data properly with two methods.
    // First one by accessing the data through the language array.
    // $products = $entity->field_product[LANGUAGE_NONE];
    // Second one with the field functions.
    $products = field_get_items($type, $entity, 'field_product');

    // Trigger the custom rules event, pass the entity as an argument.
    rules_invoke_event('node_easter_egg', $entity);

    // Trigger the other custom rules event checking if the product id 2 is
    // referenced.
    foreach ($products as $product) {
      if ($product['product_id'] == 2) {
        $product = entity_load_single('commerce_product', $product['product_id']);
        rules_invoke_event('product_easter_egg', $product);
      }
    }
  }
}

/****************************************************************************
 ********************* CHECKOUT PAGE / PANE EXERCICE ************************
 ***************************************************************************/

/**
 * Implements hook_commerce_checkout_page_info().
 */
function cg_training_commerce_checkout_page_info() {
  $checkout_pages = array();

  $checkout_pages['gift_wrap'] = array(
    'name' => t('Gift wrap'),
    'title' => t('Do you wanna have a gift wrap?'),
    'weight' => 1,
    'status_cart' => TRUE,
    'buttons' => TRUE,
  );

  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function cg_training_commerce_checkout_pane_info() {
  $checkout_panes = array();
  $checkout_panes['gift_wrap'] = array(
    'title' => t('Gift wrap'),
    'base' => 'cg_training_gift_wrap_pane',
    'page' => 'gift_wrap',
    'weight' => -10,
  );

  return $checkout_panes;
}

/**
 * Checkout form callback for the "gift_wrap" pane.
 */
function cg_training_gift_wrap_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();
  $pane_form['gift_wrap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a gift wrap to you order'),
    '#description' => '<small>' . t('10â‚¬ will be charged for this option') . '</small>',
  );
  return $pane_form;
}

/**
 * Submit callback from cg_training_gift_wrap_pane_checkout_form().
 * @see cg_training_gift_wrap_pane_checkout_form()
 */
function cg_training_gift_wrap_pane_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
  if ($form_state['values']['gift_wrap']['gift_wrap'] == TRUE) {
    // CHARGE CLIENT! (Try to do it twice if possible 'cause we are evil).
  }
}
