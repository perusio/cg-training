<?php

/****************************************************************************
 ********************** ANONYMOUS ORDER EXERCISE ****************************
 ***************************************************************************/

/**
 * Implements hook_init().
 */
function cg_training_init() {
//  // Fetches the node that references the product id 2.
//  $query = new EntityFieldQuery();
//
//  $query->entityCondition('entity_type', 'node', '=')
//    ->entityCondition('bundle', 'product_display', '=')
////    ->entityCondition('status', 1, '=')
//    ->fieldCondition('field_product', 'product_id', 2, '=');
//  $result = $query->execute();
//
//  dsm($result, 'Result EFQ');
//  dsm(node_load(key(reset($result))), 'Node');
//
//  // Fetches products with extra field.
//  $query = new EntityFieldQueryExtraFields();
//
//  $query->entityCondition('entity_type', 'node', '=')
//    ->entityCondition('bundle', 'product_display', '=')
//    ->fieldCondition('field_product', 'product_id', 2, '=')
//    ->addExtraField('field_product', 'product_id', 'id');
//  $result = $query->execute();
//
//  dsm($result, 'Result EFQ Extra fields');

//  dsm(commerce_order_load(1), 'Commande');
//  dsm(commerce_line_item_load(1), 'Line item 1');
//  dsm(commerce_line_item_load(2), 'Line item 2');
  // Uncomment this line to access session's data and read the values
  // related to anonymous orders.
//  dsm($_SESSION);
}


/****************************************************************************
 ************************* VIEW MODE EXERCISE *******************************
 ***************************************************************************/


/**
 * Implements hook_entity_info_alter().
 */
function cg_training_entity_info_alter(&$entity_types) {
  // Adds a new view mode than can be leveraged to custom the product displays
  // in the catalog.
  $entity_types['node']['view modes']['catalog'] = array(
    'label' => t('Catalog'),
    'custom settings' => TRUE,
  );
}

/****************************************************************************
 ********************** CUSTOM RULES EVENT EXERCISE *************************
 ***************************************************************************/

/**
 * Implements hook_rules_event_info().
 */
function cg_training_rules_event_info() {
  // Example of two similar events, one based on the node entity type as
  // parameter and the other one with the product entity type as parameter.
  $events['product_easter_egg'] = array(
    'label' => t('User found an easter egg (product)'),
    'group' => t('Commerce Product'),
    'variables' => array(
      'commerce_product' => array(
        'type' => 'commerce_product',
        'label' => t('Product triggering the event')
      )
    ),
  );
  $events['node_easter_egg'] = array(
    'label' => t('User found an easter egg (node)'),
    'group' => t('Node'),
    'variables' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Node triggering the event.')
      )
    ),
  );
  return $events;
}

/**
 * Implements hook_entity_view().
 */
function cg_training_entity_view($entity, $type, $view_mode, $langcode) {
  // Trigger the easter egg if we are displaying the product ID 2.
  if ($type == 'node' && $entity->type == 'product_display' && $view_mode != 'teaser') {
    // Extract the field data properly with two methods.
    // First one by accessing the data through the language array.
    // $products = $entity->field_product[LANGUAGE_NONE];
    // Second one with the field functions.
    $products = field_get_items($type, $entity, 'field_product');

    // Trigger the custom rules event, pass the entity as an argument.
    rules_invoke_event('node_easter_egg', $entity);

    // Trigger the other custom rules event checking if the product id 2 is
    // referenced.
    foreach ($products as $product) {
      if ($product['product_id'] == 2) {
        $product = entity_load_single('commerce_product', $product['product_id']);
        rules_invoke_event('product_easter_egg', $product);
      }
    }
  }
}

/****************************************************************************
 ********************* CHECKOUT PAGE / PANE EXERCICE ************************
 ***************************************************************************/

/**
 * Implements hook_commerce_checkout_page_info().
 */
function cg_training_commerce_checkout_page_info() {
  $checkout_pages = array();

  $checkout_pages['gift_wrap'] = array(
    'name' => t('Gift wrap'),
    'title' => t('Do you wanna have a gift wrap?'),
    'weight' => 1,
    'status_cart' => TRUE,
    'buttons' => TRUE,
  );

  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function cg_training_commerce_checkout_pane_info() {
  $checkout_panes = array();
  $checkout_panes['gift_wrap'] = array(
    'title' => t('Gift wrap'),
    'base' => 'cg_training_gift_wrap_pane',
    'page' => 'gift_wrap',
    'weight' => -10,
  );

  return $checkout_panes;
}

/**
 * Checkout form callback for the "gift_wrap" pane.
 */
function cg_training_gift_wrap_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();
  $pane_form['gift_wrap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a gift wrap to you order'),
    '#description' => '<small>' . t('10â‚¬ will be charged for this option') . '</small>',
  );
  return $pane_form;
}

/**
 * Submit callback from cg_training_gift_wrap_pane_checkout_form().
 * @see cg_training_gift_wrap_pane_checkout_form()
 */
function cg_training_gift_wrap_pane_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
  if ($form_state['values']['gift_wrap']['gift_wrap'] == TRUE) {
    // CHARGE CLIENT! (Try to do it twice if possible 'cause we are evil).
  }
}

/****************************************************************************
 ********************** CASH ON DELIVERY EXERCISE ***************************
 ***************************************************************************/

/**
 * Implements hook_commerce_payment_method_info().
 */
function cg_training_commerce_payment_method_info() {
  $payment_methods = array();

  // Exposes a new payment method.
  $payment_methods['cod'] = array(
    'title' => t('Cash on delivery'),
    'description' => t('Allows your user to pay there order by cash when they receive the delivery.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: form displayed as content for the payment method
 * form.
 */
function cod_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  return array('#markup' => t('Allows the user to pay by cash on the delivery.'));
}

/**
 * Payment method callback: callback processed when the payment form is
 * submitted in the checkout process.
 */
function cod_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Creates a payment transaction for the specified charge amount in the
  // pending status.
  $transaction = commerce_payment_transaction_new('cod', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('Cash on delivery. Waiting for confirmation of the payment.');
  commerce_payment_transaction_save($transaction);
}

/**
 * Implements hook_menu().
 */
function cg_training_menu() {
  $items = array();

  // Add a menu item for capturing payment.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cod-confirm'] = array(
    'title' => 'Confirm payment',
    'page callback' => 'cg_training_confirm_payment',
    'page arguments' => array(3, 5),
    'access callback' => 'cg_training_access_payment',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  return $items;
}

/**
 * Access callback, it must return FALSE when the capturing link should be
 * hidden.
 */
function cg_training_access_payment($order, $transaction) {
  // Return FALSE if the transaction isn't related to the cash on delivery
  // payment method and if the payment transaction isn't pending.
  if ($transaction->payment_method != 'cod' || $transaction->status != COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }

  // Allow access if the user can update payments on this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Execution callback.
 */
function cg_training_confirm_payment($order, $transaction) {
  // Update the status of the payment.
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Cash on delivery. Payment confirmed.');
  commerce_payment_transaction_save($transaction);

  drupal_set_message('Payment ok.');
  drupal_goto('admin/commerce/orders/' . $order->order_id . '/payment');
  exit;
}
